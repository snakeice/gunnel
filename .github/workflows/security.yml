name: Security Scan

on:
  schedule:
    # Run security scan weekly on Monday at 3am UTC
    - cron: '0 3 * * 1'
  workflow_dispatch:  # Allow manual triggering
  push:
    branches: [ main ]
    paths:
      - 'go.mod'
      - 'go.sum'
      - '**.go'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      # Run Trivy vulnerability scanner in repo mode
      - name: Run Trivy vulnerability scanner (repo)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          exit-code: '0'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: github.event_name != 'pull_request'
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy'

      # Run gosec security scanner
      - name: Run gosec security scanner
        uses: securego/gosec@master
        with:
          args: '-fmt sarif -out gosec-results.sarif -severity medium ./...'

      - name: Upload gosec results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: github.event_name != 'pull_request'
        with:
          sarif_file: 'gosec-results.sarif'
          category: 'gosec'

      # Run Nancy to check for vulnerable dependencies
      - name: Run Nancy dependency check
        run: |
          go list -json -deps ./... | docker run --rm -i sonatypecorp/nancy:latest sleuth --skip-update-check > nancy-report.txt || true
          cat nancy-report.txt

      # Run govulncheck for Go vulnerability database
      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./... || true

      # Create issue if critical vulnerabilities found
      - name: Create issue for critical vulnerabilities
        if: github.event_name == 'schedule'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            
            // Check if critical vulnerabilities exist
            let hasCritical = false;
            try {
              const trivyResults = JSON.parse(fs.readFileSync('trivy-results.sarif', 'utf8'));
              hasCritical = trivyResults.runs?.[0]?.results?.some(r => 
                r.level === 'error' || r.properties?.['security-severity'] >= 9.0
              );
            } catch (e) {
              console.log('Could not parse SARIF results:', e);
            }
            
            if (hasCritical) {
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'ðŸš¨ Critical security vulnerabilities detected',
                body: `Critical security vulnerabilities were detected in the weekly security scan.
                
                Please review the [Security tab](https://github.com/${context.repo.owner}/${context.repo.repo}/security/code-scanning) for details.
                
                Workflow run: [${context.runId}](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`,
                labels: ['security', 'critical']
              });
              console.log(`Created issue #${issue.data.number}`);
            }
